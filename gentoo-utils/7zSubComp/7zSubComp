#!/bin/bash
# 7zip subdirectory compressor and subdirectory archive extractor.

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[00;36m'
NOC='\033[0m'

# options used to compress
DEFAULT_COMPRESS_EXP="7z a -t7z -m0=lzma -mx=9 -mfb=64 -md=32m -ms=on "

accurate_sizeof()
# $1 = bytes input
{
	if [[ 1 = $(echo "$1 < 0" | bc) ]] 
	then
		val=$(echo "$1 * -1" | bc)
		neg=1
	else
		val=$1
		neg=0
	fi

	if [[ 1 == $(echo "($val / 10^12) >= 1" | bc -l) ]]; then
		SIZE_T="TB"
	elif [[ 1 == $(echo "($val / 10^9) >= 1" | bc -l) ]]; then
		SIZE_T="GB"
	elif [[ 1 == $(echo "($val / 10^6) >= 1" | bc -l) ]]; then
		SIZE_T="MB"
	elif [[ 1 == $(echo "($val / 1000) >= 1" | bc -l) ]]; then
		SIZE_T="KB"
	else
		SIZE_T="bytes"
	fi
	case $SIZE_T in
		"TB")
			MAGNITUDE=12
		;;
		"GB")
			MAGNITUDE=9
		;;
		"MB")
			MAGNITUDE=6
		;;
		"KB")
			MAGNITUDE=3
		;;
		*)	
			MAGNITUDE=0
		;;
	esac
	SIZE_VAL=$(echo "$val / 10^$MAGNITUDE" | bc -l) 
	[[ 1 = $neg ]] && SIZE_VAL=$(echo "$SIZE_VAL * -1" | bc -l)
	echo -e "$SIZE_VAL $SIZE_T"
}

yes_or_no()
{
	while true; do
		read -p "[Y/n]: " yn
		case $yn in
			[Yy]*) 
				return 0;;
			[Nn]*) 
				return 1;;
		esac
	done
}

show_master_path()
{
	echo -e "${BLUE}"
	case $1 in
		"archives")
			ls -1 *.7z
		;;
		"subdirs")
			ls -d1 */
		;;
		*|"all")
			[[ -n $(ls -1 | grep .7z) ]] && 
				echo -e "\t${NOC}Archives${BLUE}\n" && ls -1 *.7z
			[[ -n $(ls -dp1 * | grep /) ]] &&
				echo -e "\n\t${NOC}Subdirectories${BLUE}\n" && ls -d1 */
		;;
	esac	

	echo -ne "\n${NOC}$MASTER_PATH\t"
	SIZE_MASTER=$(du -bsc "$MASTER_PATH"/ | grep total | cut -f1)
	accurate_sizeof $SIZE_MASTER
}

check_exit_status()
{
	exitCode=$?
	if [[ 0 != $exitCode ]];
	then
		case $1 in
			INTEGRITY)
				echo -e "${RED}Integrity test has failed, remove this archive and start over.${NOC}"
			;;
			PATH)
				echo -e "${RED}Invalid directory.${NOC}"
			;;
		esac
		exit $exitCode
	fi
}

check_master_path()
{
	if [[ -d $MASTER_PATH ]]
	then
		cd "$MASTER_PATH"
		check_exit_status PATH
		show_master_path $1
	else
		echo "That directory does not exist." && exit 1
	fi
}

print_info()
{
	if [[ -n $(ls -1 | grep .7z) ]]
	then
		SIZE_ARCHIVES=$(du -bc *.7z | grep total | cut -f1)	
	else
		SIZE_ARCHIVES=0
	fi
	
	if [[ -n $(ls -dp1 * | grep /) ]]
	then
		SIZE_SUBDIR=$(du -bc */ | grep total | cut -f1)
	else
		SIZE_SUBDIR=0
	fi
	
	SIZE_MASTER=$(du -bsc "$MASTER_PATH"/ | grep total | cut -f1)

	echo -ne "${CYAN}Subdirectories size\t\t\t:\t\t${NOC}"
	accurate_sizeof $SIZE_SUBDIR

	echo -ne "${CYAN}Archives size\t\t\t\t:\t\t${NOC}"
	accurate_sizeof $SIZE_ARCHIVES

	if [[ REMOVE = $1 ]] 
	then
		echo -ne "${CYAN}Original Master directory size\t\t:\t\t${NOC}"
		accurate_sizeof $SIZE_ORIG_MASTER
		echo -ne "${CYAN}New Master directory size\t\t:\t\t${NOC}"
		accurate_sizeof $SIZE_MASTER
		SIZE_DELTA=$(echo "$SIZE_MASTER - $SIZE_ORIG_MASTER" | bc -l)
		echo -ne "${CYAN}Delta\t\t\t\t\t:\t\t${NOC}"
		accurate_sizeof $SIZE_DELTA
	else
		SIZE_DELTA=$(echo "$SIZE_ARCHIVES - $SIZE_SUBDIR" | bc -l)
		echo -ne "${CYAN}Delta (Archives - Subdirectories)\t:\t\t${NOC}"
		accurate_sizeof $SIZE_DELTA
		echo -ne "${CYAN}Master directory size\t\t\t:\t\t${NOC}"
		accurate_sizeof $SIZE_MASTER	
	fi
}

if [[ -n $2 ]] 
then
	case $2 in
		"-y"|"--yes")
			[[ -n $3 ]] && MASTER_PATH=$3
			YES_ALL=1
		;;
		*)
			MASTER_PATH=$2
		;;
	esac
fi

case $1 in
    "-h"|"-help"|"--help")
        echo -e "${CYAN}7zSubComp ${BLUE}[ -c [-x -e] -r -v ] [ -y ] [directory A]${NOC}"
        echo
        echo -e "7zip subdirectory compressor and archive extractor for 7z archives."
        echo
        echo -e "   ${BLUE}-c --compress${NOC}           -   enter directory A to compress all subdirectories of A into new archives in A."
        echo -e "                               Verifies archive integrity after each archive creation."
        echo -e "   ${BLUE}-x -e --extract${NOC}         -   enter directory A to extract all archives of A into subdirectories in A."
        echo -e "   ${BLUE}-r --remove${NOC}             -   enter directory A to remove only subdirectories under A."
        echo -e "   ${BLUE}-v --view${NOC}               -   enter directory A to view size info and all subdirectories and archives of A."
        echo -e "   ${BLUE}-y --yes${NOC}                -   confirm without asking."
        echo 
        echo
        echo -e "Examples:"
        echo        
        echo -e "   7zSubComp -c .      Compress all subdirectories under current directory \".\" ."
        echo
        echo -e "   7zSubComp -x .      Extract all archives under current directory \".\" ."
        echo 
        echo -e "   7zSubComp -r -y .   Remove only subdirectories under current directory \".\" ."
        echo -e "                       Without asking for confirmation (CAREFUL)."
        echo
        echo -e "   7zSubComp -v .      View subdirectories and archives under current directory \".\" ."
        echo
        echo -e "   \".\" above can be replaced with any directory. Not providing one will ask you for one."
        echo
    ;;
	"-v"|"--view")
		if [[ -z $MASTER_PATH ]]
		then
			echo -e "${CYAN}Enter a directory to view all subdirectories and archives.${NOC}"
			echo
			read -e -p ': ' MASTER_PATH	
		fi
		check_master_path "all"

		echo -e "\n${BLUE}Information${NOC}\n-----------"		
		print_info
	;;
	"-r"|"--remove")
		if [[ -z $MASTER_PATH ]]
		then
			echo -e "${CYAN}Enter a directory to remove all separate subdirectories only.
			\nThis will not remove anything other than subdirectories under this path.${NOC}"
			echo
			read -e -p ': ' MASTER_PATH
		fi	
		
		check_master_path "all"

		[[ -n $(ls -dp1 * | grep /) ]] && TARGETS_NO=$(ls -d1 */ | wc -l)
		[[ -z $TARGETS_NO ]] && echo -e "${RED}No subdirectories found inside \"$MASTER_PATH\" to remove.${NOC}" && exit

		echo -e "\n${GREEN}$TARGETS_NO${NOC} target subdirectories found."	
		
		SIZE_ORIG_MASTER=$(du -bsc "$MASTER_PATH"/ | grep total | cut -f1)

		[[ -z $YES_ALL ]] && echo -e "\n${RED}Delete${CYAN} all the subdirectories only?${NOC}" && $(yes_or_no "$input")
		if [[ 0 = $? || -n $YES_ALL ]]
		then
			echo -e "\n${RED}Are you sure?${NOC}"
			if (yes_or_no "$input") then
				START_TIME=$SECONDS
				i=1
				while [[ 1 = $(echo "$i <= $TARGETS_NO" | bc) ]];
				do
					SED_EXP=$i'p'
					x=$(ls -d1 */ | head -n1)
					x=${x::-1}
					echo -e "\n${BLUE}[${NOC}$i${BLUE}/${NOC}$TARGETS_NO${BLUE}]\t\"$x\"/${NOC}"
					REMOVAL_EXP="rm -rv \"$x\"/"

					eval $REMOVAL_EXP
					
					((i++))
				done
			fi
		fi
		show_master_path "all"
	
		echo -e "\n${BLUE}Information${NOC}\n-----------"
		echo -e "${GREEN}$TARGETS_NO${CYAN} archives removed in ${NOC}$((SECONDS - START_TIME))${CYAN} seconds."
		print_info REMOVE
	;;
	"-x"|"-e"|"--extract") 
		if [[ -z $MASTER_PATH ]]
		then
			echo -e "${CYAN}Enter a directory to target and extract all archives into separate subdirectories.
			\nThis will ${RED}overwrite${CYAN} whatever is already in the subdirectories or create them if they dont exist.${NOC}"
			echo
			read -e -p ': ' MASTER_PATH
		fi

		check_master_path "archives"
		[[ -n $(ls -1 | grep .7z) ]] && TARGETS_NO=$(ls -1 *.7z | wc -l)
		[[ -z $TARGETS_NO ]] && echo -e "${RED}No archives found inside \"$MASTER_PATH\" to extract.${NOC}" && exit
		
		echo -e "\n${GREEN}$TARGETS_NO${NOC} target archives found."	
		
		[[ -z $YES_ALL ]] && echo -e "\n${CYAN}Start extracting?${NOC}" && $(yes_or_no "$input")
		if [[ 0 = $? || -n $YES_ALL ]]
		then
			START_TIME=$SECONDS
			i=1
			while [[ 1 = $(echo "$i <= $TARGETS_NO" | bc) ]];
			do
				SED_EXP=$i'p'
				x=$(ls -1 *.7z | sed -n "$SED_EXP")
				EXTRACT_EXP="7z x -y \"$x\""
				echo -ne "\n${BLUE}[${NOC}$i${BLUE}/${NOC}$TARGETS_NO${BLUE}]\t$x\t${NOC}"
				accurate_sizeof $(du -bs "$x" | cut -f1)
				
				echo -e "${CYAN}Extracting archive...${NOC}"
				echo $EXTRACT_EXP
				eval $EXTRACT_EXP
				check_exit_status
				
				((i++))
			done
			
			echo -e "\n${BLUE}Information${NOC}\n-----------"
			echo -e "${GREEN}$TARGETS_NO${CYAN} archives extracted in ${NOC}$((SECONDS - START_TIME))${CYAN} seconds."
			print_info
		fi		
	;;	  
	"-c"|"--compress")
		if [[ -z $MASTER_PATH ]]
		then
			echo -e "${CYAN}Enter a directory to target and compress all subdirectories into separate 7z archives.
			\nThis will ${RED}overwrite${CYAN} whatever is already in the archives or create them if they dont exist.${NOC}"
			echo
			read -e -p ': ' MASTER_PATH
		fi

		check_master_path "subdirs"
		[[ -n $(ls -dp1 * | grep /) ]] && TARGETS_NO=$(ls -d1 */ | wc -l)
		[[ -z $TARGETS_NO ]] && echo -e "${RED}No subdirectories found inside \"$MASTER_PATH\" to compress.${NOC}" && exit

		echo -e "\n${GREEN}$TARGETS_NO${NOC} target subdirectories found."

		echo -e "\n${CYAN}Current compression settings: ${NOC}$DEFAULT_COMPRESS_EXP"
		[[ -z $YES_ALL ]] && echo -e "\n${CYAN}Start compressing?${NOC}" && $(yes_or_no "$input")
		if [[ 0 = $? || -n $YES_ALL ]]
		then
			START_TIME=$SECONDS
			i=1
			while [[ 1 = $(echo "$i <= $TARGETS_NO" | bc) ]];
			do
				COMPRESS_EXP=$DEFAULT_COMPRESS_EXP
				SED_EXP=$i'p'
				x=$(ls -d1 */ | sed -n "$SED_EXP")
				x=${x::-1}
				
				echo -ne "\n${BLUE}[${NOC}$i${BLUE}/${NOC}$TARGETS_NO${BLUE}]\t$x\t${NOC}"
				accurate_sizeof $(du -bs "$x"/ | cut -f1)

				COMPRESS_EXP+="\"$x.7z\" \"$x\"/"
				
				echo -e "${CYAN}Creating archive...${NOC}"
				echo $COMPRESS_EXP
				eval $COMPRESS_EXP
				check_exit_status
				
				echo -e "\n${CYAN}Verifying integrity of archive...${NOC}"
				INTEGRITY_EXP="7z t \"$x.7z\""
			
				echo $INTEGRITY_EXP
				eval $INTEGRITY_EXP
				check_exit_status INTEGRITY
				
				((i++))
			done

			echo -e "\n${BLUE}Information${NOC}\n-----------"
			echo -e "${GREEN}$TARGETS_NO${CYAN} archives created and verified in ${NOC}$((SECONDS - START_TIME))${CYAN} seconds."
			print_info
		fi
	;;
	*)
		echo -e "invalid input \"$1\"\nTry -h or --help"
	;;
esac
