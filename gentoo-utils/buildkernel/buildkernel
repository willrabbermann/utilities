#!/bin/bash
#
#	buildkernel automatically builds the linux source tree symlinked in /usr/src/linux.
#	Also handles initramfs generation, unified kernel generation, upgrading kernel .config to another kernel, 
#	regenerating grub.cfg, moving and cleaning up build files. Clean up old distfiles and binpkgs with eclean. 
#	Modify for your setup.
#
#	Made for Gentoo OpenRC
#
#	Dependencies:
#			app-text/tree
#			sys-kernel/dracut - see 'man /etc/dracut.conf' add secure boot key, etc.
#			sys-boot/grub - configure /etc/default/grub
#			(optional) app-crypt/sbctl & app-crypt/sbsigntools for secure boot
#
#				Set your /etc/dracut.conf.d/custom.conf with key and uefi_stub location:
#				-------
#				uefi_stub="/usr/lib/systemd/boot/efi/linuxx64.efi.stub"
#				uefi_secureboot_cert="/usr/share/secureboot/keys/db/db.pem"
#				uefi_secureboot_key="/usr/share/secureboot/keys/db/db.key"
#				-------
#
#			(optional) sys-apps/systemd-utils +boot USE flag is required for dracut to generate unified kernels images
#					   necessary for secure boot.
#
#			(optional) sys-devel/distcc for distributed compiling across local computers. 
#				Change the "hosts" and "hostsTJ" arrays to reflect host names and thread count.
#
#	Change the current symlinked linux source tree with 'eselect kernel list/set'.
#		
#	Run 'buildkernel --help' for the help page.
#

# Color definitions
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
CYAN='\033[00;36m'
LPURPLE='\033[01;35m'
NOC='\033[0m'

if [ "$EUID" -ne 0 ]; then
	echo -e "${RED}Please run as root.${NOC}"
	exit
fi

# sbctl to manage keys
SECUREBOOTKEY="/usr/share/secureboot/keys/db/db.key"
SECUREBOOTCERT="/usr/share/secureboot/keys/db/db.pem"
# host names 
declare -a hosts=("host_one" "host_two" "host_three") 
declare -a hostsTJ=("6" "8" "8")

yes_or_no()
{
	while true; do
		read -p "[Y/n]: " yn
		case $yn in
			[Yy]*) return 0  ;;
			[Nn]*) echo -e "${RED}Aborted${NOC}\n" ; return  1 ;;
		esac
	done
}

relocate()
{
	
	kernel=$(ls -1A /boot | grep "^vmlinuz")
	sysmap=$(ls -1A /boot | grep "^System.map")
	config=$(ls -1A /boot | grep "^config")
	initrd=$(ls -1A /boot | grep "^initramfs")
	[[ -d /boot/EFI/Linux ]] &&
		efi=$(ls -1A /boot/EFI/Linux | grep "^linux")
	[[ -z $efi ]] && efi=$(ls -1A /boot | grep "^gentoo-linux")
	[[ -n $(echo "$kernel $sysmap $config $initrd $efi" | grep .old) ]] && old_build_files="true"
	[[ $MOVING != "true" && $old_build_files = "true" ]] && echo -e "${RED}Old build files detected, aborting. Go to /boot and delete any ${NOC}\".old\"${RED} files!${NOC}" && exit 1
}

getKernelVersion() 
{
	kver=$(eselect kernel show | grep src | awk '{print $NF}' | cut -c 16-)
	kernel_full="linux-$kver"
}

findLatestKernel()
{
	num_of_kernels=$(ls -1 /usr/src/ | grep -n '' | tail -n 1 | cut -b 1)
	for ((i=num_of_kernels; i > 0; i--))
	do
		a=$(ls -1 /usr/src/ | sed -n "$i"p)
		if [[ ! $a =~ "dist" ]]; then
			latestkernel=$a
			i=0
			lkver=$(echo $latestkernel | cut -f2- -d-)
		fi
	done
}

run_build_initramfs()
{
	if [[ -s $SECUREBOOTKEY && -s $SECUREBOOTCERT ]]; then
			echo -e "\n${GREEN}Building unified kernel image...${NOC}\n"
			dracut --kver=$kver --force --uefi
	fi
		# build backup initramfs for unsecure boot 
		echo -e "\n${GREEN}Building initramfs...${NOC}\n"
		dracut --kver=$kver --force
}

build_initramfs()
{
	relocate
	[[ -n $initrd ]] && echo -e "Found: ${GREEN}$initrd${NOC}"
	if [[ -n $kernel ]]; then
		kver=$(echo $kernel | cut -f2- -d-)
	else
		echo -e "No kernel found in /boot, defaulting to symlinked kernel at /usr/src/linux"
		getKernelVersion
	fi
	echo -e "Kernel version: ${GREEN}$kver${NOC}"
	if [[ -z $NO_ASK ]]; then
		echo "Build initramfs?"
		if ( yes_or_no "$input" ) then
			run_build_initramfs
		fi
	else
		run_build_initramfs
	fi
}

find_total_threads()
{
	distcc_status=$(grep distcc /etc/portage/make.conf) 
	[[ -n $distcc_status ]] && distcc="true"
	[[ -z $distcc_status ]] && distcc="false"
	hostsLength=${#hosts[@]}
	hostsOnline=0
	if [[ $localhostmode == "false" && $distcc == "true" ]]; then
		tj=0	
		# check if hosts are online
		for (( i=0; i<${hostsLength}; i++ ));
		do
			pingResponse=$(ping ${hosts[$i]} -c 1 -W 0.5)
			pingExitCode=$(echo $?)
			if [ 0 = "$pingExitCode" ] 
			then
				tj=$(echo "$tj + ${hostsTJ[$i]}" | bc)	
				hostsOnline=$(echo "$hostsOnline + 1" | bc)
			else
				echo -e "${RED}Host ${hosts[$i]} is offline${NOC}"
			fi
		done
	fi
	if [[ $localhostmode == "true" || $distcc == "false" || 
		  $(echo "$hostsOnline <= 1" | bc) == 1 ]]; then
		[[ $localhostmode == "false" && $distcc == "false" ]] && echo -e "${RED}distcc is disabled.${RED}"
		if [[ $localhostmode == "true" ]]; then
			for (( i=0; i<${hostsLength}; i++ ))
			do
				if [[ ${hosts[$i]} == $(hostname) ]]; then
					tj=${hostsTJ[$i]}
					echo -e "${GREEN}Localhost mode enabled.${NOC}"
					break
				fi
			done
		elif [[ $distcc == "false" || $(echo "$hostsOnline <= 1" | bc) == 1 ]]; then 
			tj=$(cat /proc/cpuinfo	| grep siblings | sort -u | awk -F ": " '{print $NF}')
			echo -e "${GREEN}Localhost mode enabled.${NOC}"
		fi
	fi
}

make_kernel()
{
	find_total_threads
	echo -e "${GREEN}Making kernel with ${BLUE}$tj${GREEN} threads...${NOC}"
	if [[ $distcc == "true" ]]; then
		make -j$tj CC="distcc gcc"
	else
		make -j$tj CC="gcc"
	fi
	echo -e "\n${GREEN}Making and installing modules...${NOC}"
	make modules_install
	echo -e "\nInstalling kernel to /boot..."
	make install
}

run_build_kernel()
{
	cd /usr/src/linux
	
	if [[ -z $NO_ASK ]]; then
		echo -e "\nClean linux tree?"
		if ( yes_or_no "$input" ) then
			make clean
			echo
		fi
	fi

	time make_kernel
	echo
}

build()
{
	if [[ -z $NO_ASK ]]; then
		echo "Is this the correct kernel to build?"
		eselect kernel list
		if ( yes_or_no "$input" ) then
			run_build_kernel
		fi
	else
		run_build_kernel
	fi
}

menu_config()
{
	cd /usr/src/linux
	make menuconfig MENUCONFIG_COLOR=mono
}

rename()
{
	cd /boot
	if [[ -n "$kernel" && -z $(echo $kernel | grep "dist") ]]; then
		kernelb="${kernel##*/}" #base file name
		newName="vmlinuz-$1-"${kernelb:8:${#kernelb}}
		echo -e "\nRenaming ${GREEN}$kernelb${NOC} to ${GREEN}$newName${NOC}"
		mv $kernelb $newName
	fi
	if [ -n "$efi" ]; then
		newName="gentoo-linux-$1.efi"
		echo -e "\nRenaming ${GREEN}$efi${NOC} to ${GREEN}$newName${NOC}"
		mv /boot/EFI/Linux/$efi $newName
	fi
}

move_build() 
{
	relocate
	cd /boot
	# bzip2 the system.map
	if [[ -n "$sysmap" && ${sysmap: -8} != ".tar.bz2" ]]; then
		echo -e "\nCompressing ${GREEN}$sysmap${NOC}"
		sysmapb="${sysmap##*/}" #base file name
		tar -cjSf $sysmapb.tar.bz2 $sysmapb
		rm $sysmap
		relocate
	fi
	echo -e "\nMoving build files to ${GREEN}$1${NOC}\n"
	[ -n "$kernel" ] && mv $kernel $1
	[ -n "$sysmap" ] && mv $sysmap $1
	[ -n "$config" ] && mv $config $1
	[ -n "$initrd" ] && mv $initrd $1
	[ -n "$efi"    ] && mv $efi /boot/EFI/gentoo
	
	[[ -n $(lscpu | grep Intel) && -a "/boot/amd-uc.img" ]] && rm /boot/amd-uc.img
	[[ -n $(lscpu | grep AMD) && -a "/boot/intel-uc.img" ]] && rm /boot/intel-uc.img	
}

regen_grub() 
{
	grub-mkconfig -o /boot/grub/grub.cfg
}

upgrade_kernel()
{
	getKernelVersion
	
	echo -e "\nCurrent kernel is ${GREEN}$kver${NOC}\n"
	echo "Choose where to copy current .config to:"
	ls /usr/src/  | grep '^linux-' | cut -c 7- | grep -n ''
	read -p ": " upgrade_kver
	
	[[ -d /usr/src/linux-$upgrade_kver ]] && valid_flag=1	
	if [[ -z $valid_flag && -n $(echo $upgrade_kver | grep '^[0-9]' | grep -v '-') ]]; then
		int_filter="^$upgrade_kver:"
		if	cut_len=$(echo "${#upgrade_kver} + 2" | bc) ; then 
			upgrade_kver=$(ls /usr/src/  | grep '^linux-' | cut -c 7- | grep -n '' | grep "$int_filter" | cut -c $cut_len-)
			[[ -d /usr/src/linux-$upgrade_kver ]] && valid_flag=1
		fi
	fi		 
	
	[[ -z $valid_flag ]] && echo -e "${RED}Invalid kernel name.${NOC}" && exit
	[[ $upgrade_kver == $kver ]] && echo -e "${RED}Cannot upgrade current kernel with current kernel.${NOC}" && exit
	
	echo -e "Are you sure you want to ${RED}overwrite${NOC} ${GREEN}/usr/src/linux-$upgrade_kver/.config${NOC} with ${GREEN}/usr/src/linux-$kver/.config${NOC}?"
	if (yes_or_no "$input") then
		echo
		cp -v /usr/src/linux/.config /usr/src/linux-$upgrade_kver
	fi
}

auto_upgrade_kernel()
{
	getKernelVersion
	findLatestKernel
	echo -e "Current kernel is ${GREEN}$kver${NOC}\n"
	echo -e "Latest kernel installed is ${GREEN}$lkver${NOC}\n"
	
	if [[ $lkver != $kver ]]; then
		echo -e "${BLUE}Already upgraded to the latest kernel version, nothing to do.${NOC}\n"
	else
		cp -v /usr/src/$kernel_full/.config /usr/src/$latestkernel/.config
		echo  
		latestkernel_index=$(eselect kernel list | grep $latestkernel | cut -f 2 -d [ | cut -f 1 -d ])
		if [[ $latestkernel_index ]]; then
			echo -e "${BLUE}$(ls -l /usr/src/linux | cut -f9- -d " ")${NOC}\n"
			eselect kernel set $latestkernel_index
			menu_config
			relocate
			if [[ -n "$kernel$sysmap$config$initrd$efi" ]]; then
				echo "Existing build files detected, moving to a temporary location..."
				mkdir -pv /boot/old_build_files
				[[ -n $kernel ]] && mv /boot/$kernel /boot/old_build_files
				[[ -n $sysmap ]] && mv /boot/$sysmap /boot/old_build_files
				[[ -n $config ]] && mv /boot/$config /boot/old_build_files
				[[ -n $initrd ]] && mv /boot/$initrd /boot/old_build_files
				[[ -n $efi ]] && mv $efi /boot/old_build_files
				echo
			fi
			NO_ASK=1
			build
			build_initramfs
			rename "custom"
			move_build "/boot/EFI/gentoo/custom/"
			regen_grub
			echo
			[[ -d /boot/old_build_files ]] && mv -v /boot/old_build_files/* /boot && rm -rfv /boot/old_build_files
			emerge --quiet --usepkg @module-rebuild
		fi
	fi
}

clean_kernels()
{
	baseDir="/boot/EFI/gentoo/"
	tree -C -L 1 --noreport /lib/modules
	echo -e "${LPURPLE}$(du -sh /lib/modules/)${NOC}\n"
	tree -C --noreport -I '*grub*' -I '*System.*' -I '*initramfs-*' -I '*config-*' $baseDir
	echo -e "${LPURPLE}$(du -sh $baseDir)${NOC}\n"
	tree -C -L 1 --noreport /usr/src
	echo -e "${LPURPLE}$(du -sh /usr/src)${NOC}\n"
	echo -e "${GREEN}Enter part of the full kernel name to remove matching wildcards ${LPURPLE}*${NOC}##.##.##${LPURPLE}*"
	echo -e "${GREEN}Or enter nothing to abort.${NOC}"
	read rkn

	[[ -z $rkn ]] && echo -e "${RED}No input, aborting.${NOC}" && exit 1
	
	[[ -z $(tree -L 2 $baseDir | grep $rkn) && -z $(tree -L 1 /lib/modules | grep $rkn) && -z $(tree -L 1 /usr/src/  | grep $rkn) ]] &&
		echo -e "\n${RED}No kernels or modules matching ${BLUE}\"${NOC}$rkn${BLUE}\"${RED} were found.${NOC}" &&
		exit 1
   
	echo

	if [[ -n $(tree $baseDir | grep $rkn) ]]; then
		cd $baseDir && echo -e "${BLUE}$(pwd)/*${NOC}"
		ls -1 -A * | grep $rkn
	fi
	if [[ -n $(ls -1 -A /lib/modules | grep $rkn) ]]; then
		cd /lib/modules && echo -e "${BLUE}$(pwd)${NOC}"
		ls -1 -A | grep $rkn
	fi
	if [[ -n $(ls -1 -A /usr/src | grep $rkn) ]]; then
		cd /usr/src && echo -e "${BLUE}$(pwd)${NOC}"
		ls -1 -A | grep $rkn
	fi

	[[ -n $(echo "linux" | grep $rkn) ]] && 
		echo -e "\n${RED}Can not delete symlink "${NOC}/usr/src/linux${RED}" aborting!" && 
		exit 1

	echo -e "\n${RED}Are you sure${NOC} you want to ${RED}remove${NOC} these kernels / modules?"
	if (yes_or_no "$input" ); then
		echo -e "\n${RED}Are you very sure?${NOC}"
		if ( yes_or_no "$input" ); then
			echo
			cd "${baseDir}custom"
			if [[ -n $(ls | grep $rkn) ]]; then
				echo -e "${GREEN}Cleaning: ${NOC}${baseDir}custom/${LPURPLE}*${RED}$rkn${LPURPLE}*${NOC}"
				rm *$rkn*
			fi
			cd "${baseDir}distribution"
			if [[ -n $(ls | grep $rkn) ]]; then
				echo -e "${GREEN}Cleaning: ${NOC}${baseDir}distribution/${LPURPLE}*${RED}$rkn${LPURPLE}*${NOC}"
				rm *$rkn*
			fi		
			cd "${baseDir}git"
			if [[ -n $(ls | grep $rkn) ]]; then
				echo -e "${GREEN}Cleaning: ${NOC}${baseDir}git/${LPURPLE}*${RED}$rkn${LPURPLE}*${NOC}" 
				rm *$rkn*
			fi
			cd "${baseDir}zen"
			if [[ -n $(ls | grep $rkn) ]]; then
				echo -e "${GREEN}Cleaning: ${NOC}${baseDir}zen/${LPURPLE}*${RED}$rkn${LPURPLE}*${NOC}"
				rm *$rkn*
			fi
			cd "/lib/modules/"
			if [[ -n $(ls | grep $rkn) ]]; then
				echo -e "${GREEN}Cleaning: ${NOC}/lib/modules/${LPURPLE}*${RED}$rkn${LPURPLE}*${NOC}"
				rm -r *$rkn*
			fi
			cd "/usr/src/"
			if [[ -n $(ls | grep $rkn) ]]; then
				echo -e "${GREEN}Cleaning: ${NOC}/usr/src/${LPURPLE}*${RED}$rkn${LPURPLE}*${NOC}"
				rm -r *$rkn*
			fi
			echo
			regen_grub
		else
			exit 0
		fi
	fi
}

case $2 in
	"localhost" | "local" | 'l' | '-l' | "--local" | "--localhost")
		localhostmode="true"
	;;
	*)
		[[ -n $2 ]] && kver=$2
		localhostmode="false"
	;;
esac

case $1 in
	'move' | 'm' | '-m' | '--move')
	;;
	'regen' | 'r' | '-r' | '--regen')
		regen_grub
		exit
	;;
	'build' | 'b' | '-b' | '--build')
		build
		exit
	;;
	'initramfs' | 'i' | '-i' | '--initramfs')
		build_initramfs
		exit
	;;
	'install-efi' | '-install-efi' | '--install-efi')
		if [[ -n $(mount -v | grep "/boot") ]]; then
			grub-install --efi-directory=/boot
			[[ $? == 0 ]] && echo -e "${GREEN}GRUB has been added to your EFI boot menu.${NOC}"
		else
			echo -e "${RED}/boot is not mounted. Can not install GRUB.${NOC}"
		fi ; exit
	;;
		'im' | '-im' | '--im')
		build_initramfs
	;;
	'current' | 'c' | '-c' | '--current')
		eselect kernel list
		exit
	;;
	'auto' | 'a' | '-a' | '--auto')
		build
		build_initramfs
	;;
	'upgrade' | 'u' | '-u' | '--upgrade')
		upgrade_kernel
		exit
	;;
	'auto-upgrade' | 'au' | '-au' | '--auto-upgrade')
		auto_upgrade_kernel
	;;
	'menu' | 'me' | '-me' | '--menu')
		menu_config
		exit
	;;
	'clean-kernels' | '-clean-kernels' | '--clean-kernels')
		clean_kernels
		exit
	;;
	*)
	
		echo -en \
		"buildkernel   [${GREEN}-m -r -b -a ${BLUE}-l${GREEN} -i -im -u -au -me -c clean-kernels install-efi -h${NOC}] "
		echo -e "[${BLUE}kernel_version,localhost${NOC}]"
		echo -e "${GREEN}--move${NOC}          -- move build files."
		echo -e "${GREEN}--regen${NOC}         -- regenerate \"${LPURPLE}/boot/grub/grub.cfg${NOC}\" and exit."
		echo -e "${GREEN}--build${NOC}         -- build \"${LPURPLE}/usr/src/linux${NOC}\" and exit."
		echo -e "${GREEN}--auto${NOC}          -- build \"${LPURPLE}/usr/src/linux${NOC}\" & initramfs then continue to automatic moving."
		echo -e "${BLUE}--localhost${NOC}     -- make in localhost only mode (e.g. \"buildkernel ${GREEN}--auto ${BLUE}--localhost${NOC}\")."
		echo -e "${GREEN}--i${NOC}   ${BLUE}[kver]${NOC}    -- build initramfs and exit. ${BLUE}[kver]${NOC} is optional."
		echo -e "${GREEN}--im${NOC}  ${BLUE}[kver]${NOC}    -- build initramfs and continue to moving. ${BLUE}[kver]${NOC} is optional."
		echo -e "${GREEN}--upgrade${NOC}       -- copy the .config of the current kernel to a new kernel directory."
		echo -e "${GREEN}--auto-upgrade${NOC}  -- copy the .config of the current kernel into latest kernel directory, automatically preform most update steps for a custom kernel."
		echo -e "${GREEN}--menu${NOC}          -- open menuconfig in \"${LPURPLE}/usr/src/linux${NOC}\"."
		echo -e "${GREEN}--current${NOC}       -- print current kernel(s) in eselect and exit."
		echo -e "${GREEN}--clean-kernels${NOC} -- clean up old kernels and kernel modules."
		echo -e "${GREEN}--install-efi${NOC}   -- install GRUB to a GPT EFI System Partition mounted at \"${LPURPLE}/boot${NOC}\"."
		echo -e "${GREEN}--help${NOC}          -- print this help page and exit."
		exit
	;;
esac

MOVING="true"

relocate

if [[ -n "$kernel$sysmap$config$initrd$efi$kernel" ]]; then
	echo -e "\nLocated build files:${GREEN}"
	[[ -n $kernel ]] && echo $kernel
	[[ -n $sysmap ]] && echo $sysmap
	[[ -n $config ]] && echo $config
	[[ -n $initrd ]] && echo $initrd
	[[ -n $efi	  ]] && echo $efi
else
	echo -e "No build files found in /boot/* to move."
	exit 0
fi

[[ -n $old_build_files ]] && echo -e "\n${RED}Old build files detected, it is not a good idea to move them.
It is recommended to remove all build files and then rebuild. Or delete the .old files manually and try --move again."

echo -e "\n${NOC}Choose where to move the build files:"
echo -e "[ (c)ustom ]        ${GREEN}/boot/EFI/gentoo/custom${NOC}"
echo -e	"[ (d)istribution ]  ${GREEN}/boot/EFI/gentoo/distribution${NOC}"
echo -e	"[ (g)it sources  ]  ${GREEN}/boot/EFI/gentoo/git${NOC}"
echo -e	"[ (z)en sources  ]  ${GREEN}/boot/EFI/gentoo/zen${NOC}"
echo -e "\n[ (r)emove ]        ${RED}Remove all build files${NOC} in /boot (non-recursive) and /boot/EFI/Linux (recursive)."
echo -e "[ (m)ove ]          Drop to root shell in /boot and move build files manually."
echo -e "[ (q|e) ]           Exit program"
read -p ": " build_dir

case $build_dir in
	'd' | 'dist')
		rename "dist"
		move_build "/boot/EFI/gentoo/distribution/"
		regen_grub
	;;
	'c' | 'custom')
		rename "custom"
		move_build "/boot/EFI/gentoo/custom/"
		regen_grub
	;;
	'g' | 'git')
		rename "git"
		move_build "/boot/EFI/gentoo/git/"
		regen_grub
	;;
	'z' | 'zen')
		rename "zen"
		move_build "/boot/EFI/gentoo/zen/"
		regen_grub
	;;
	'r' | 'remove')
		echo -e "\n${RED}Removing build files.${NOC}"
		rm -v /boot/System.map-*
		rm -v /boot/config-*
		rm -v /boot/initramfs-*
		rm -v /boot/vmlinuz-*
	;;
	'e' | 'exit' | 'q' | 'quit')
		exit
	;;
	'm' | 'move' | 'manual')
		echo -e "\nDropping to root shell in /boot."
		cd /boot
		exec /bin/bash
	;;
esac
